<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dgut.music_online.dao.UserDao">
    <select id="getAllUser" resultType="String">
            select * from `schema`.user
    </select>

    <insert id="insertUser" parameterType="com.dgut.music_online.domain.User">
        insert into `schema`.user
        values
        (#{id}, #{nickname}, #{avatarUrl}, #{signature}, #{gender}, #{userType})
    </insert>


    <resultMap id="userMap" type="com.dgut.music_online.domain.User">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="avatarUrl" column="avatarUrl"/>
        <result property="signature" column="signature"/>
        <result property="gender" column="gender"/>
        <result property="userType" column="userType"/>
        <collection property="songLists" ofType="com.dgut.music_online.domain.SongList">
            <id property="id" column="songListID"/>
            <result property="description" column="description"/>
            <result property="name" column="name"/>
            <result property="coverImgUrl" column="coverImgUrl"/>
        </collection>
    </resultMap>

    <select id="getUserById" parameterType="int" resultMap="userMap">
        select user.id, nickname, avatarUrl, signature, gender, userType, songList.id as songListID, description, name, coverImgUrl
        from `schema`.user as user, `schema`.songList as songList
        where user.id = #{id} and creatorId like user.id
    </select>

    <select id="getUsersByPages" resultType="com.dgut.music_online.domain.User">
        select id, nickname, gender, userType from `schema`.user limit #{pages}, #{number}
    </select>

    <delete id="deleteUserById" parameterType="int">
        delete from `schema`.user where id = #{id}
    </delete>


</mapper>
